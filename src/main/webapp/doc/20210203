severs side 검증
1. spring Validator
	구현방법 : interface Validator를 구현

2. JSR-303 (규약은 계속 추가 수정됨)
	어노테이션 이용 ==> command 객체에 적용
	@NotNull
	@Min, @Max
	@Size(min,max)
	@Pattern(정규식)
	
	==>
	@Size(min=5)
	private String userid; 
	@Valid
	
1번 : 구체적으로 작성 가능, 복잡한 로직 검증 가능
2번 : 간단한 형태로만 검증 가능 	
.
국제화 메시지 소스  = 스프링 빈

1. resourceBundle 파일 준비(error.properties...)
2. resourceBundle 스프링 빈 등록 (ReloadableResourceBundleMessageSource)
<!-- messageSource 등록 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:/kr/or/ddit/msg/error/error</value>
				<value>classpath:/kr/or/ddit/msg/msg/msg</value>
			</list>
		</property>
	</bean>
3. Validator,controller에서 validate 메소드 실행

public String  registUser2(UserVo userVo, BindingResult result, Model model,RedirectAttributes ra  ) {
new UserVoValidator().validate(userVo, result);

4. jsp ==> 해당 필드에 에러가 있을때만 메시지를 표현
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<form: errors path="커맨트 객체.필드> 


spring message
spring message : <spring:message code="GREETTING" arguments="brown"/>

view Resolver : controller가 반환하는 view name을 이영하여 해당 요펑을 생성할 
				view 객체를 선택

복수의 view resolver등록이 가능 
view resolver의 우선순의를 설정하여 적용될 순서를 결정할 수 있다

기존 : internalResourceViewReslover
추가 : BeanNameViewResolver
		==> 컨트롤러가 반환하는 view name과 동일한 이름의 스프링 빈이 잇으면
			 해당 스프링 빈을 view 객체로 사용
			 
			 
*****internalResourceViewResolver 사용시 주의점 
==> prefix, surrfix,조합에 ㅇ릫 생성된 문자열에 해당하는 리스스가 없어도
	검증을 하지 않고 응답을 내보낸다ㅣ
	즉 파일이 존재하지 않을 경우 404 에러 발생
	
	==> 우선순위를 가장 최하위로 둔다
	
	
ExcelDownloadView


우리 회사의 전체 직원 리스트 

Interceptor/ filter 차이점 