사용자 전체리스트 개발 완료

사용자 페이징 처리를 위해 필요한 값
1. 정렬기준
2. 페이지 사이즈
3. 페이지

user/pagingUser ==? 페이지, 페이지 사이즈 파라미터를 보내지 않음
					페이지, 페이지 사이즈 파라미커가 없을 경우 servlet 기본값 처리를 함
					  1     5 
					  
String pageParam = request.getParameter("page");
		String pageSizeparam = request.getParameter("pageSize");
		
int page = pageParam == null ? 1 :  Integer.parseInt(pageParam);
int pageSize =  pageSizeparam  == null ? 5 : Integer.parseInt(pageSizeparam);

PageVo vo = new PageVo(page,pageSize);		

public String pagingUser(int page, int pageSize) {
}	

@RequestParam
**메소드 인자에서 사용가능 어노테이션 

1. 바인딩 될 파라미터 설정(name)
	파러미터 멸과 메소드 인자명이 다를경우 자동 바인딩이 되지 않은 문제를 해결
	파라미터명을 명시함으로써 메소드 인자에 장동 바인딩 될 수 있도록 설정 
	
2. 파라미터가 존재하지 않을 경우 기본 값 설정(defaultValue)
	파라미터가 존제하지 않을 경우 , 메소드 인자를 primitive type으로 선언한 경우 에러 발생
	--> defaultValue 설정으로 에러 방지 가능 

3. 파라미터 존재 여부 설절(required, 기본값 true)
   파라미터 반드시 필요한지 여부를 설정 
   단 defaultValue 설정 시 자동을 false로 설정된
   
@ModelAttribute  --> HelloController에서 테스트
1. 메소드 
	@RequestMapping 어노테이션이 붙은 메소드가 실행되기 전에 먼저 실행하고 
	해당 메소드가 리턴하는 값을 Model객체에 넣어준다
	
	@ModelAttribute
	public List<String> rangers(){
		.....
		return list;
	
	}
	
	@RequestMapping("list")
	public String view(Model model){
		return "view";
	}
	
	
	localhost/user/list ==> rangers() ==> model ==> list
	localhost/user/list2 ==> rangers() ==> model ==> list2
	
	@Before == @Test	
	@Before == @Test	
	@Before == @Test
	
		
2. 파라미터 인자
Model객체에 저장된 속성을 파라미터 인자에 바인딩 가능 

command 객체의 경우 @ModelAttribute 어노테이션을 적용하지 않더라도
model 객체에 자동으로 등록이 된다 

@SessionAttributes
class에 적용

@ModelAttribute가 적용된 메소드가 @RequestMapping이 적용돤 메소느 실행 전 항상 호출 되는 부하를 줄이는 것이 목적

최초 1회에 대해서는 @ModelAttribute가 적용된 메소드를 호출하여 해당 속성 값을 세션에 적용
그 이후 호출에 대해서는 세션에 저장된 값을 사용하여 @ModelAttribute 메소드가 적용된 로직이 
반복호출 되는 것을 방지 => cache

@PathVariable : uri의 일부를 메소드 인자로 바인딩  (예시 : 도서관홈페이지 )
사용 : 메소드 인ㅈ자
1. @RequestMapping path 설정 시 어떤 부분을 가져올 지  표현
	=> @RequestMapping("hello/{path}")
	
2. 메소드 인자에 @PathVariable을 통해 가져올 값을 바인딩
	public String view (@pathVariable("path")String path) {
	}
	
@RequestParam : 파라미터를 메소드 인자로 바인딩 할때
@RequestHeader : 헤더 정보를 메소드 인자로 바인딩 할때

파일 업로드 시 작업 내역
1. 서블릿
	. form태그 enctype="multipart/form-data"
	. form태그 method="post"
	. <input type="file"/>
	. @MultipartConfig
	
	파일 정보 : Part part = req.getPart("file");
	
2. spring
	. form태그 enctype="multipart/form-data"
	. form태그 method="post"
	. <input type="file"/>
	. *** multipartResolver라는 스프링 빈 등록 CommonsMultipartResolver
	
	파일 정보 : MultipartFile
	부모
	자식 (application-context.xml)
	
@RequestPart - 파일 업로드 : @RequestParam과 유사

복수 파라미터전송 
메소드 인자로 List ==> List<String> 인자 X
메소드 인자로 배열 ==> String[] 		인자 	O
메소드 인자로 리스트를 필드로 하는 command 객체 ==> UserVo userVo O 
public UsersVo {
	private List<String> userids;
	private List<String> usernms;
}

스프링 MVC 실습 
1. 사용자 상세 페이지( 제외 사항 : 사용자 사진, 엑스박스 떠도 상관 없음)
2. 사용자 수정 페이지 (파일업로드까지 전체 이관)
3. 사용자 등록 페이지 (파일업로드까지 전체 이관)
4. 사용자 삭제 기능 (전체 이관)


5. 테스트 코드 작성



